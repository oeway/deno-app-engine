apiVersion: apps/v1
kind: Deployment
metadata:
  name: deno-app-engine
  labels:
    app: deno-app-engine
    app.kubernetes.io/managed-by: "Helm"
  annotations:
    app.kubernetes.io/name: "deno-app-engine"
    app.kubernetes.io/instance: "deno-app-engine"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: deno-app-engine
  template:
    metadata:
      labels:
        app: deno-app-engine
      annotations:
        app.kubernetes.io/name: "deno-app-engine"
        app.kubernetes.io/instance: "deno-app-engine"
    spec:
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      securityContext:
        runAsUser: 1000  # This is the UID of the deno user in the container
        fsGroup: 1000    # This is the GID of the deno user in the container
        runAsNonRoot: true
        fsGroupChangePolicy: "Always"
        seccompProfile:
          type: RuntimeDefault
      volumes:
        - name: cache
          emptyDir:
            medium: ""
            sizeLimit: "4Gi"
        - name: deno-dir
          emptyDir:
            medium: ""
            sizeLimit: "4Gi"
        - name: vectordb-offload
          emptyDir:
            medium: ""
            sizeLimit: "2Gi"
        - name: agent-data
          emptyDir:
            medium: ""
            sizeLimit: "1Gi"
        - name: pyodide-packages
          emptyDir:
            medium: ""
            sizeLimit: "2Gi"
      containers:
        - name: deno-app-engine-container
          image: ghcr.io/oeway/deno-app-engine:0.1.55
          imagePullPolicy: Always
          command: ["deno"]
          args: ["run", "--allow-net", "--allow-read", "--allow-write", "--allow-env", "--allow-ffi", "scripts/hypha-service.ts"]
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
            readOnlyRootFilesystem: false
          volumeMounts:
            - name: cache
              mountPath: /home/deno/.cache
            - name: deno-dir
              mountPath: /deno-dir
            - name: vectordb-offload
              mountPath: /app/vectordb_offload
            - name: agent-data
              mountPath: /app/agent_data
            - name: pyodide-packages
              mountPath: /app/pyodide_packages
          env:
            - name: DENO_DIR
              value: "/deno-dir"
            - name: HOME
              value: "/home/deno"
            - name: PYODIDE_PACKAGES_PATH
              value: "/app/pyodide_packages"
            - name: HYPHA_TOKEN
              valueFrom:
                secretKeyRef:
                  name: hypha-secrets
                  key: HYPHA_AGENTS_TOKEN
            - name: HYPHA_SERVER_URL
              value: "http://hypha-server.hypha.svc.cluster.local:9520"
            - name: HYPHA_WORKSPACE
              value: "hypha-agents"
            - name: KERNEL_POOL_ENABLED
              value: "false"
            - name: KERNEL_POOL_SIZE
              value: "1"
            - name: KERNEL_POOL_PRELOAD_CONFIGS
              value: ""
            - name: HYPHA_CLIENT_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: AGENT_DATA_DIRECTORY
              value: "/app/agent_data"
            - name: OLLAMA_HOST
              value: "http://ollama.hypha.svc.cluster.local:11434"
            - name: AGENT_MODEL_BASE_URL
              value: "https://api.openai.com/v1/"
            - name: AGENT_MODEL_NAME
              value: "gpt-4.1"
            - name: AGENT_MODEL_API_KEY
              valueFrom:
                secretKeyRef:
                  name: agent-lens-secrets
                  key: OPENAI_API_KEY
            # - name: AGENT_MODEL_BASE_URL
            #   value: "http://ollama.hypha.svc.cluster.local:11434/v1/"
            # - name: AGENT_MODEL_API_KEY
            #   value: "ollama"
            # - name: AGENT_MODEL_NAME
            #   value: "llama3.1:8b"
            - name: AGENT_MODEL_TEMPERATURE
              value: "0.5"
            - name: MAX_AGENTS
              value: "1000"
            - name: LOAD_APPS
              value: "true"
          startupProbe:
            exec:
              command:
                - deno
                - eval
                - |
                  // Startup check - wait for service to be ready
                  try {
                    console.log('Startup check: verifying Deno runtime...');
                    const test = { status: 'starting', timestamp: Date.now() };
                    JSON.stringify(test);
                    console.log('Startup check passed');
                    Deno.exit(0);
                  } catch (e) {
                    console.error('Startup check error:', e.message);
                    Deno.exit(1);
                  }
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 10
            failureThreshold: 18  # 30 + 10*18 = 210 seconds max startup time
            successThreshold: 1
          livenessProbe:
            exec:
              command:
                - deno
                - eval
                - |
                  // Simple liveness check - just verify Deno runtime is responsive
                  try {
                    // Check if we can perform basic operations
                    const test = { status: 'alive', timestamp: Date.now() };
                    const json = JSON.stringify(test);
                    
                    // Check memory usage is reasonable (less than 7GB out of 8GB limit)
                    const memUsage = Deno.memoryUsage();
                    if (memUsage.rss > 7 * 1024 * 1024 * 1024) {
                      console.error('Memory usage too high:', memUsage.rss);
                      Deno.exit(1);
                    }
                    
                    console.log('Liveness check passed');
                    Deno.exit(0);
                  } catch (e) {
                    console.error('Liveness check error:', e.message);
                    Deno.exit(1);
                  }
            initialDelaySeconds: 120
            periodSeconds: 60
            timeoutSeconds: 15
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - deno
                - eval
                - |
                  // Enhanced readiness check - verify service file exists and basic functionality
                  try {
                    // Check if the main service file exists and is readable
                    const serviceFile = '/app/scripts/hypha-service.ts';
                    try {
                      await Deno.stat(serviceFile);
                    } catch {
                      console.error('Service file not found');
                      Deno.exit(1);
                    }
                    
                    // Check environment variables are set
                    const requiredEnvVars = ['HYPHA_SERVER_URL', 'HYPHA_WORKSPACE'];
                    for (const envVar of requiredEnvVars) {
                      if (!Deno.env.get(envVar)) {
                        console.error(`Required env var ${envVar} not set`);
                        Deno.exit(1);
                      }
                    }
                    
                    // Check memory is reasonable for readiness
                    const memUsage = Deno.memoryUsage();
                    if (memUsage.rss > 6 * 1024 * 1024 * 1024) {
                      console.error('Memory usage high for readiness:', memUsage.rss);
                      Deno.exit(1);
                    }
                    
                    console.log('Readiness check passed');
                    Deno.exit(0);
                  } catch (e) {
                    console.error('Readiness check error:', e.message);
                    Deno.exit(1);
                  }
            initialDelaySeconds: 120
            periodSeconds: 30
            timeoutSeconds: 15
            failureThreshold: 3
          resources:
            limits:
              cpu: "4"
              memory: "8G"
            requests:
              cpu: "500m"
              memory: "2G"
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: deno-app-engine-hpa
  labels:
    app: deno-app-engine
    app.kubernetes.io/managed-by: "Helm"
  annotations:
    app.kubernetes.io/name: "deno-app-engine"
    app.kubernetes.io/instance: "deno-app-engine"
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: deno-app-engine
  minReplicas: 1
  maxReplicas: 10
  metrics:
    # Memory-based scaling (primary metric)
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 70  # Reduced from 85% since kernel pool overhead is removed
    # CPU-based scaling (secondary metric)
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 50  # Reduced from 60% for more responsive scaling
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 120   # Slower response to avoid premature scaling
      policies:
      - type: Percent
        value: 50     # More conservative scaling up (50% instead of 100%)
        periodSeconds: 60
      - type: Pods
        value: 2      # Add up to 2 pods at once instead of 3
        periodSeconds: 60
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 60  # Reduced from 2 minutes to 1 minute for faster scale-down
      policies:
      - type: Percent
        value: 100     # Scale down very aggressively (100% instead of 50%)
        periodSeconds: 60
      selectPolicy: Min 