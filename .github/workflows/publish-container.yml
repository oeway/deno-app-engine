name: Publish Docker

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'deno.json'
      - 'Dockerfile'
      - '.github/workflows/publish-container.yml'
      - 'kernel/**'
      - 'scripts/**'
      - 'mod.ts'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          
      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v2.x
          
      - name: Cache dependencies
        run: deno cache --lock=deno.lock mod.ts
          
      - name: Run tests before building
        run: deno test --allow-all
        
      - name: Log in to the Container registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from deno.json
        id: extract-version
        run: |
          if [ -f "deno.json" ]; then
            VERSION=$(cat deno.json | jq -r '.version // empty')
            if [ -n "$VERSION" ] && [ "$VERSION" != "null" ]; then
              echo "version=$VERSION" >> $GITHUB_OUTPUT
              echo "Found version: $VERSION"
            else
              echo "No version found in deno.json"
              echo "version=" >> $GITHUB_OUTPUT
            fi
          else
            echo "deno.json not found"
            echo "version=" >> $GITHUB_OUTPUT
          fi

      - name: Detect version changes
        id: check-version
        run: |
          if [ -n "${{ steps.extract-version.outputs.version }}" ]; then
            # Check if this version tag already exists
            if git tag --list | grep -q "^v${{ steps.extract-version.outputs.version }}$"; then
              echo "Version tag v${{ steps.extract-version.outputs.version }} already exists"
              echo "current-version=" >> $GITHUB_OUTPUT
            else
              echo "New version detected: ${{ steps.extract-version.outputs.version }}"
              echo "current-version=${{ steps.extract-version.outputs.version }}" >> $GITHUB_OUTPUT
            fi
          else
            echo "No version to check"
            echo "current-version=" >> $GITHUB_OUTPUT
          fi

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image (version tag)
        if: steps.check-version.outputs.current-version
        uses: docker/build-push-action@v5.0.0
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.check-version.outputs.current-version }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Build and push Docker image (latest tag)
        uses: docker/build-push-action@v5.0.0
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          labels: ${{ steps.meta.outputs.labels }}

      - name: Create and push version tag
        if: steps.check-version.outputs.current-version
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag "v${{ steps.check-version.outputs.current-version }}"
          git push origin "v${{ steps.check-version.outputs.current-version }}" 